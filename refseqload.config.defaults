#format: sh
#
#  refseqloader.config.defaults
#
#  This file sets up environment variables that are needed for the
#  RefSeq Sequence load
#
#  The default values are set to process the initial RefSeq Release
###########################################################################

###########################################################################
#
#  GENERAL SETTINGS
#
###########################################################################

#  Installation directory for the RefSeq sequence load
INSTALLDIR=/usr/local/mgi/live/dataload/refseqload
#INSTALLDIR=/home/sc/jsam/refseqload

#  Installation directory for the QC report product
APP_QCRPTDIR=/usr/local/mgi/live/qcreports_db
#APP_QCRPTDIR=/home/sc/jsam/qcreports_db

export INSTALLDIR DBUTILSDIR RADARDBUTILSDIR APP_QCRPTDIR

###########################################################################
#
#  DATABASE SETTINGS BY DATABASE
#
###########################################################################

# MGD Connection parameters 
MGD_DBSERVER=PROD_MGI
#MGD_DBSERVER=DEV1_MGI

MGD_DBURL=shire.informatics.jax.org:4100
#MGD_DBURL=rohan.informatics.jax.org:4101

MGD_DBNAME=mgd
#MGD_DBNAME=mgd_jsamlec

MGD_DBUSER=mgd_dbo
MGD_DBPASSWORDFILE=${DBUTILSDIR}/.mgd_dbo_password

MGD_DBSCHEMADIR=/usr/local/mgi/live/dbutils/mgd/mgddbschema

export MGD_DBSERVER MGD_DBURL MGD_DBNAME
export MGD_DBUSER MGD_DBPASSWORDFILE MGD_DBSCHEMADIR

# RADAR Connection parameters 
RADAR_DBSERVER=PROD_MGI
#RADAR_DBSERVER=DEV1_MGI

RADAR_DBURL=shire.informatics.jax.org:4100
#RADAR_DBURL=rohan.informatics.jax.org:4101

RADAR_DBNAME=radar
#RADAR_DBNAME=radar_jsam

RADAR_DBUSER=mgd_dbo
RADAR_DBPASSWORDFILE=${DBUTILSDIR}/.mgd_dbo_password

RADAR_DBSCHEMADIR=/usr/local/mgi/live/dbutils/radar/radardbschema

export RADAR_DBSERVER RADAR_DBURL RADAR_DBNAME RADAR_DBUSER
export RADAR_DBPASSWORDFILE RADAR_DBSCHEMADIR 

###########################################################################
#
#  SOFTWARE SETTINGS
#
###########################################################################

# 2G memory limit in initial mode
# 1.5 G in incremental mode
#JAVARUNTIMEOPTS="-Xms2G -Xmx2G"
JAVARUNTIMEOPTS="-Xms1500m -Xmx1500m"

JAVA_LIB=/usr/local/mgi/live/lib/java1.4/lib_java_dla/dla.jar:/usr/local/mgi/live/lib/java1.4/lib_java_core/core.jar:/usr/local/mgi/live/lib/java1.4/lib_java_dbsmgd/dbsmgd.jar:/usr/local/mgi/live/lib/java1.4/lib_java_dbsrdr/dbsrdr.jar


CLASSPATH=.:${INSTALLDIR}/refseqload.jar:${JAVA_LIB}:${COMMON_CLASSPATH}

export JAVA_HOME JAVA_RUN JAVARUNTIMEOPTS JAVA_LIB CLASSPATH

###########################################################################
#
#  LOAD SPECIFIC SETTINGS
#
###########################################################################

#  Java applications
DLA_LOADER=org.jax.mgi.app.refseqload.RefSeqloader
DLA_START=org.jax.mgi.shr.dla.DLAStart

# SQL STREAM
# this overrides the default BCP_Inline_Stream
DLA_LOAD_STREAM=org.jax.mgi.shr.dbutils.dao.BCP_Script_Stream

#  seqloader QC report shell script
APP_SEQ_QCRPT=${APP_QCRPTDIR}/seqload/runQC.csh

# molecular source processor QC report script
APP_MSP_QCRPT=${APP_QCRPTDIR}/msp/runQC.csh

export DLA_LOADER DLA_START DLA_LOAD_STREAM
export APP_SEQ_QCRPT APP_MSP_QCRPT

#  Full path to dir containing the data, report, log and archive directories
FILEDIR=/data/loads/genbank/refseqload
#FILEDIR=/net/mtdoom/vol/rohan/data/loads/genbank/refseqload

# Full path to dir containing RefSeq release input files - 
# if LOAD_MODE=incremental the jobstream determines its own input directory
INPUTDIR=/data/downloads/ftp.ncbi.nih.gov/refseq
#INPUTDIR=/net/hobbiton/data/downloads/ftp.ncbi.nih.gov/refseq

# Full path the the logs, reports, and archive directories
LOGDIR=${FILEDIR}/logs
RPTDIR=${FILEDIR}/reports
ARCHIVEDIR=${FILEDIR}/archive
OUTPUTDIR=${FILEDIR}/output
export FILEDIR INPUTDIR LOGDIR RPTDIR ARCHIVEDIR OUTPUTDIR

#  Complete path name of the RefSeq input file
#  Frameworks expects the value 'STDIN' if jobstream script pipes input to
#  the application. Jobstream script expects APP_INFILE to be defined
#  if INFILE_NAME=STDIN
INFILE_NAME=STDIN

# full path to the RefSeq release input files
# Note: if LOAD_MODE=incremental and APP_RADAR_INPUT=true
# the jobstream determines its own input files
#PIPED_INFILES="${INPUTDIR}/vertebrate*protein*gz ${INPUTDIR}/vertebrate*rna*gz"
APP_INFILES=

# method to cat files to stdin, generally 'cat' or 'gunzip -c'
APP_CAT_METHOD="/usr/local/bin/gunzip -c"

export INFILE_NAME APP_INFILES APP_CAT_METHOD

# true = regex matching for finding record delim is turned on
INFILE_USE_REGEX=false

# GenBank sequence record regex begin and end delimiter
#INFILE_BEGIN_DELIMITER="^LOCUS"
#INFILE_END_DELIMITER="^ORIGIN"

# GenBank sequence record String begin and end delimiter
# begin is LOCUS followed by 7 spaces
INFILE_BEGIN_DELIMITER="LOCUS       "
INFILE_END_DELIMITER=\nORIGIN

export INFILE_BEGIN_DELIMITER INFILE_END_DELIMITER INFILE_USE_REGEX

# buffersize in bytes used by nio.ByteBuffer
# 21,000,000 = ~20 MB
INFILE_BUFFERSIZE=21000000

# incremental, incremental_initial, or delete_reload
# incremental_initial doesn't use a MergeSplitProcessor
SEQ_LOAD_MODE=incremental

# get non-cum input files from RADAR if 'true' and SEQ_LOAD_MODE=
# incremental
APP_RADAR_INPUT=true

# max size of a set of non-cums to process in bytes -
# 300MB compressed seems to be good
# if set to 0, all files will be processed
APP_RADAR_MAX=300000000

export INFILE_BUFFERSIZE SEQ_LOAD_MODE APP_RADAR_MAX APP_RADAR_INPUT

# true if a virtual (computationally derived) sequence
SEQ_VIRTUAL=false

# this load's MGI_User login value for DB tables CreatedBy and ModifiedBy column
JOBSTREAM=refseq_load

# SEQ_Sequence Provider controlled vocab for RefSeq 
SEQ_PROVIDER=RefSeq

# logical db name for this data provider
SEQ_LOGICALDB=RefSeq

export SEQ_VIRTUAL JOBSTREAM SEQ_PROVIDER SEQ_LOGICALDB

# organisms to load
SEQ_LOAD_MOUSE=true
SEQ_LOAD_RAT=false
SEQ_LOAD_HUMAN=false

export SEQ_LOAD_MOUSE SEQ_LOAD_RAT SEQ_LOAD_HUMAN

# Refseq seqid prefixes to load
NM=true
NR=true
NP=true
NC=false
NG=false
NT=false
NW=false
NZ=false
ZP=false
XM=true
XR=true
XP=true

export NM NR NP NC NG NT NW NZ ZP XM XR XP

#  Complete path name of the log files
LOG_PROC=${LOGDIR}/refseqload.proc.log
LOG_DIAG=${LOGDIR}/refseqload.diag.log
LOG_CUR=${LOGDIR}/refseqload.cur.log
LOG_VAL=${LOGDIR}/refseqload.val.log

# Send debug messages to the diagnostic log
LOG_DEBUG=false

# logger factory class - allows classes to get their own loggers
LOG_FACTORY=org.jax.mgi.shr.dla.DLALoggerFactory

export LOG_PROC LOG_DIAG LOG_CUR LOG_VAL LOG_DEBUG LOG_FACTORY

###########################################################################
#
#  BCP MANAGER SETTINGS BY DATABASE
#
###########################################################################

#  Settings used to create a BCP manager for the MGD database
MGD_BCP_PATH=${OUTPUTDIR}
MGD_BCP_PREVENT_EXECUTE=false
MGD_BCP_TRUNCATE_LOG=true
MGD_BCP_DROP_INDEXES=true
MGD_BCP_RECORD_STAMPING=false
MGD_BCP_AUTO_FLUSH=false
MGD_BCP_OK_TO_OVERWRITE=false

export MGD_BCP_PATH MGD_BCP_PREVENT_EXECUTE MGD_BCP_TRUNCATE_LOG
export MGD_BCP_DROP_INDEXES MGD_BCP_RECORD_STAMPING MGD_BCP_AUTO_FLUSH
export MGD_BCP_OK_TO_OVERWRITE

#  Settings used to create a BCP manager for the RADAR database
RADAR_BCP_PATH=${OUTPUTDIR}
RADAR_BCP_PREVENT_EXECUTE=false
RADAR_BCP_TRUNCATE_LOG=true
RADAR_BCP_DROP_INDEXES=true
RADAR_BCP_RECORD_STAMPING=false
RADAR_BCP_AUTO_FLUSH=true
RADAR_BCP_OK_TO_OVERWRITE=false

export RADAR_BCP_PATH RADAR_BCP_PREVENT_EXECUTE RADAR_BCP_TRUNCATE_LOG
export RADAR_BCP_DROP_INDEXES RADAR_BCP_RECORD_STAMPING RADAR_BCP_AUTO_FLUSH
export RADAR_BCP_OK_TO_OVERWRITE

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR updates
#
###########################################################################

# setting used to create a ScriptWriter for the MGD database
MGD_SCP_PATH=${MGD_BCP_PATH}
MGD_SCP_PREVENT_EXECUTE=false
MGD_SCP_OK_TO_OVERWRITE=true
MGD_SCP_FILENAME=updates

#MGD_SCP_SUFFIX=
MGD_SCP_OUTFILENAME=updates
#MGD_SCP_OUTSUFFIX=

export MGD_SCP_PATH MGD_SCP_PREVENT_EXECUTE MGD_SCP_OK_TO_OVERWRITE
export MGD_SCP_FILENAME 
export MGD_SCP_SUFFIX MGD_SCP_OUTFILENAME MGD_SCP_OUTSUFFIX

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR Merges and Splits
#
###########################################################################

# setting used to create a ScriptWriter for the merges and split
SCP_PATH=${MGD_BCP_PATH}
SCP_PREVENT_EXECUTE=false
SCP_OK_TO_OVERWRITE=true
SCP_FILENAME=mergeSplits

#SCP_SUFFIX=
SCP_OUTFILENAME=mergeSplits
#SCP_OUTSUFFIX=

export SCP_PATH SCP_PREVENT_EXECUTE SCP_OK_TO_OVERWRITE
export SCP_FILENAME 
export SCP_SUFFIX SCP_OUTFILENAME SCP_OUTSUFFIX

###########################################################################
#
#  MISCELLANEOUS SETTINGS
#
###########################################################################

#  Recipient list for mailing the log files (comma-separated)
MAIL_LOG_PROC="sc, lec"
MAIL_LOG_CUR="sc"

export MAIL_LOG_PROC MAIL_LOG_CUR

##################################################################
# repeat file processing used when in incremental mode
##################################################################

# process repeat file if true
APP_PROCESS_REPEATS=true

# full path to repeat file
SEQ_REPEAT_FILE=${OUTPUTDIR}/repeats.out

# rename repeat file to this name for processing
APP_REPEAT_TO_PROCESS=${SEQ_REPEAT_FILE}.to.process

export APP_PROCESS_REPEATS SEQ_REPEAT_FILE APP_REPEAT_TO_PROCESS
